// Notes
// Adding an school:
// _id is automatically generated by mongodb, so:
// - 'SchoolData' for when form is being submitted (addSchoolHandler)
// - 'School' when API creates/responds (AddAction / const addedSchool)
// (
//    SchoolData: use for forms, API POST/PATCH bodies
//    School: use for anything that came from the database or API
// )

import { ReactNode, useEffect, useReducer } from 'react';

import { School, SchoolData } from '../../types/schools';

import { SchoolsContext, SchoolsContextValue } from './SchoolsContext';

export type SchoolsState = {
  schools: School[];
  isUpdating: boolean;
  updatingSchool: School | null;
};

const initialState: SchoolsState = {
  schools: [],
  isUpdating: false,
  updatingSchool: null,
};

export type SchoolsMethods = {
  addSchool: (school: SchoolData) => Promise<SchoolData>;
  deleteSchool: (_id: string) => void;
  updateSchoolSubmit: (school: School) => Promise<School>;
  setUpdatingSchool: (school: School | null) => void;
  setIsUpdating: (status: boolean) => void;
};

type SchoolsContextProviderProps = {
  children: ReactNode;
};

type LoadAction = {
  type: 'LOAD_SCHOOLS';
  payload: School[];
};

type AddAction = {
  type: 'ADD_SCHOOL';
  payload: School;
};

type DeleteAction = {
  type: 'DELETE_SCHOOL';
  payload: string;
};

type UpdateAction = {
  type: 'UPDATE_SCHOOL';
  payload: School;
};

type setUpdatingSchoolAction = {
  type: 'SET_UPDATING_SCHOOL';
  payload: School | null;
};

type SetIsUpdatingAction = {
  type: 'SET_IS_UPDATING';
  payload: boolean;
};

type Action =
  | LoadAction
  | AddAction
  | DeleteAction
  | UpdateAction
  | setUpdatingSchoolAction
  | SetIsUpdatingAction;

function schoolsReducer(state: SchoolsState, action: Action): SchoolsState {
  switch (action.type) {
    case 'LOAD_SCHOOLS':
      return {
        ...state,
        schools: action.payload,
      };
    case 'ADD_SCHOOL':
      return {
        ...state,
        schools: [...state.schools, action.payload],
      };
    case 'DELETE_SCHOOL':
      return {
        ...state,
        schools: state.schools.filter(
          (school) => school._id !== action.payload
        ),
      };
    case 'UPDATE_SCHOOL':
      return {
        ...state,
        schools: state.schools.map((school) =>
          school._id === action.payload._id
            ? {
                ...action.payload,
              }
            : school
        ),
      };
    case 'SET_UPDATING_SCHOOL':
      return { ...state, updatingSchool: action.payload };
    case 'SET_IS_UPDATING':
      return { ...state, isUpdating: action.payload };

    default:
      return state;
  }
}

export function SchoolsContextProvider({
  children,
}: SchoolsContextProviderProps) {
  const [schoolsState, dispatch] = useReducer(schoolsReducer, initialState);

  useEffect(() => {
    async function fetchSchools() {
      try {
        const response = await fetch('/api/schools');
        const data = await response.json();

        dispatch({ type: 'LOAD_SCHOOLS', payload: data });
      } catch (error) {
        console.error(error);
      }
    }

    fetchSchools();
  }, []);

  const ctx: SchoolsContextValue = {
    schools: schoolsState.schools,
    isUpdating: schoolsState.isUpdating,
    updatingSchool: schoolsState.updatingSchool,

    addSchool: async (school: SchoolData) => {
      try {
        const response = await fetch('/api/schools', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(school),
        });

        if (!response.ok) {
          const data = await response.json();
          throw new Error(data.error);
        }

        const addedSchool = await response.json();
        dispatch({ type: 'ADD_SCHOOL', payload: addedSchool });

        return addedSchool;
      } catch (error) {
        console.error(error);
        throw error;
      }
    },

    deleteSchool: async (schoolId: string) => {
      try {
        const response = await fetch(`/api/schools/${schoolId}`, {
          method: 'DELETE',
        });

        if (!response.ok) {
          throw new Error(`Failed to delete school ${schoolId}`);
        }

        dispatch({ type: 'DELETE_SCHOOL', payload: schoolId });
      } catch (error) {
        console.error(error);
      }
    },

    updateSchoolSubmit: async (school: School) => {
      const { _id: schoolId } = school;
      try {
        const response = await fetch(`/api/schools/${schoolId}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(school),
        });

        if (!response.ok) {
          throw new Error(`Failed to update school ${schoolId}`);
        }

        const updatedSchool = await response.json();
        dispatch({ type: 'UPDATE_SCHOOL', payload: updatedSchool });

        return updatedSchool;
      } catch (error) {
        console.error(error);
        throw error;
      }
    },

    setUpdatingSchool(school) {
      dispatch({ type: 'SET_UPDATING_SCHOOL', payload: school });
    },

    setIsUpdating(status) {
      dispatch({ type: 'SET_IS_UPDATING', payload: status });
    },
  };

  return (
    <SchoolsContext.Provider value={ctx}>{children}</SchoolsContext.Provider>
  );
}
