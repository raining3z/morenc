// Notes
// Adding an user:
// _id is automatically generated by mongodb, so:
// - 'UserData' for when form is being submitted (addUserHandler)
// - 'User' when API creates/responds (AddAction / const addedUser)
// (
//    UserData: use for forms, API POST/PATCH bodies
//    User: use for anything that came from the database or API
// )

import { ReactNode, useEffect, useReducer } from 'react';
import { UsersContext, UsersContextValue } from './UsersContext';

import { User, UserData, UserLogin } from '../../types/users';

export type UsersState = {
  users: User[];
  isUpdating: boolean;
  updatingUser: User | null;
};

const initialState: UsersState = {
  users: [],
  isUpdating: false,
  updatingUser: null,
};

export type UsersMethods = {
  addUser: (user: UserData) => void;
  deleteUser: (_id: string) => void;
  loginUser: (user: UserLogin) => void;
  updateUserSubmit: (user: User) => void;
  setUpdatingUser: (user: User | null) => void;
  setIsUpdating: (status: boolean) => void;
};

type UsersContextProviderProps = {
  children: ReactNode;
};

type LoadAction = {
  type: 'LOAD_PROJECTS';
  payload: User[];
};

type AddAction = {
  type: 'ADD_PROJECT';
  payload: User;
};

type DeleteAction = {
  type: 'DELETE_PROJECT';
  payload: string;
};

type LoginAction = {
  type: 'USER_LOGIN';
  payload: UserLogin;
};

type UpdateAction = {
  type: 'UPDATE_PROJECT';
  payload: User;
};

type SetUpdatingUserAction = {
  type: 'SET_UPDATING_PROJECT';
  payload: User | null;
};

type SetIsUpdatingAction = {
  type: 'SET_IS_UPDATING';
  payload: boolean;
};

type Action =
  | LoadAction
  | AddAction
  | DeleteAction
  | UpdateAction
  | LoginAction
  | SetUpdatingUserAction
  | SetIsUpdatingAction;

function usersReducer(state: UsersState, action: Action): UsersState {
  switch (action.type) {
    case 'LOAD_PROJECTS':
      return {
        ...state,
        users: action.payload,
      };
    case 'ADD_PROJECT':
      return {
        ...state,
        users: [...state.users, action.payload],
      };
    case 'DELETE_PROJECT':
      return {
        ...state,
        users: state.users.filter((user) => user._id !== action.payload),
      };
    case 'UPDATE_PROJECT':
      return {
        ...state,
        users: state.users.map((user) =>
          user._id === action.payload._id
            ? {
                ...action.payload,
              }
            : user
        ),
      };
    case 'SET_UPDATING_PROJECT':
      return { ...state, updatingUser: action.payload };
    case 'SET_IS_UPDATING':
      return { ...state, isUpdating: action.payload };

    default:
      return state;
  }
}

export function UsersContextProvider({ children }: UsersContextProviderProps) {
  const [usersState, dispatch] = useReducer(usersReducer, initialState);

  useEffect(() => {
    async function fetchUsers() {
      try {
        const response = await fetch('/api/users');
        const data = await response.json();

        dispatch({ type: 'LOAD_PROJECTS', payload: data });
      } catch (error) {
        console.error(error);
      }
    }

    fetchUsers();
  }, []);

  const ctx: UsersContextValue = {
    users: usersState.users,
    isUpdating: usersState.isUpdating,
    updatingUser: usersState.updatingUser,

    addUser: async (user: UserData) => {
      try {
        const response = await fetch('/api/users', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(user),
        });

        if (!response.ok) {
          if (response.status === 409) {
            const data = await response.json();
            throw new Error(data.error || 'Email already exists');
          }
          throw new Error('Failed to add user');
        }

        const addedUser = await response.json();
        dispatch({ type: 'ADD_PROJECT', payload: addedUser });
      } catch (error) {
        console.error(error);
      }
    },

    deleteUser: async (userId: string) => {
      try {
        const response = await fetch(`/api/users/${userId}`, {
          method: 'DELETE',
        });

        if (!response.ok) {
          throw new Error(`Failed to delete user ${userId}`);
        }

        dispatch({ type: 'DELETE_PROJECT', payload: userId });
      } catch (error) {
        console.error(error);
      }
    },

    updateUserSubmit: async (user: User) => {
      const { _id: userId } = user;
      try {
        const response = await fetch(`/api/users/${userId}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(user),
        });

        if (!response.ok) {
          throw new Error(`Failed to update user ${userId}`);
        }

        const updatedUser = await response.json();
        dispatch({ type: 'UPDATE_PROJECT', payload: updatedUser });
      } catch (error) {
        console.error(error);
      }
    },

    loginUser: async (user: UserLogin) => {
      console.log('hello');
      const { email, password } = user;

      console.log(email, password);
      try {
        const response = await fetch(`/api/login`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(user),
        });

        console.log(response);

        if (!response.ok) {
          throw new Error(`Failed to login`);
        }

        const loginUser = await response.json();
        dispatch({ type: 'USER_LOGIN', payload: loginUser });
      } catch (error) {
        console.error(error);
      }
    },

    setUpdatingUser(user) {
      dispatch({ type: 'SET_UPDATING_PROJECT', payload: user });
    },

    setIsUpdating(status) {
      dispatch({ type: 'SET_IS_UPDATING', payload: status });
    },
  };

  return <UsersContext.Provider value={ctx}>{children}</UsersContext.Provider>;
}
