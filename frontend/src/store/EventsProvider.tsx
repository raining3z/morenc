// Notes
// Adding an event:
// _id is automatically generated by mongodb, so:
// - 'EventData' for when form is being submitted (addEventHandler)
// - 'Event' when API creates/responds (AddAction / const addedEvent)
// (
//    EventData: use for forms, API POST/PATCH bodies
//    Event: use for anything that came from the database or API
// )

import { ReactNode, useEffect, useReducer } from 'react';
import { EventsContext, EventsContextValue } from './EventsContext';

import { Event, EventData } from '../types/events';

export type EventsState = {
  events: Event[];
  isUpdatingEvent: boolean;
  updatingEvent: Event | null;
};

const initialState: EventsState = {
  events: [],
  isUpdatingEvent: false,
  updatingEvent: null,
};

export type EventsMethods = {
  addEvent: (event: EventData) => void;
  deleteEvent: (_id: string) => void;
  updateEventSubmit: (event: Event) => void;
  setUpdatingEvent: (event: Event | null) => void;
  setIsUpdating: (status: boolean) => void;
};

type EventsContextProviderProps = {
  children: ReactNode;
};

type LoadAction = {
  type: 'LOAD_EVENTS';
  payload: Event[];
};

type AddAction = {
  type: 'ADD_EVENT';
  payload: Event;
};

type DeleteAction = {
  type: 'DELETE_EVENT';
  payload: string;
};

type UpdateAction = {
  type: 'UPDATE_EVENT';
  payload: Event;
};

type SetUpdatingEventAction = {
  type: 'SET_UPDATING_EVENT';
  payload: Event | null;
};

type SetIsUpdatingAction = {
  type: 'SET_IS_UPDATING';
  payload: boolean;
};

type Action =
  | LoadAction
  | AddAction
  | DeleteAction
  | UpdateAction
  | SetUpdatingEventAction
  | SetIsUpdatingAction;

function eventsReducer(state: EventsState, action: Action): EventsState {
  switch (action.type) {
    case 'LOAD_EVENTS':
      return {
        ...state,
        events: action.payload,
      };
    case 'ADD_EVENT':
      return {
        ...state,
        events: [...state.events, action.payload],
      };
    case 'DELETE_EVENT':
      return {
        ...state,
        events: state.events.filter((event) => event._id !== action.payload),
      };
    case 'UPDATE_EVENT':
      return {
        ...state,
        events: state.events.map((event) =>
          event._id === action.payload._id
            ? {
                ...action.payload,
              }
            : event
        ),
      };
    case 'SET_UPDATING_EVENT':
      return { ...state, updatingEvent: action.payload };
    case 'SET_IS_UPDATING':
      return { ...state, isUpdatingEvent: action.payload };

    default:
      return state;
  }
}

export function EventsContextProvider({
  children,
}: EventsContextProviderProps) {
  const [eventsState, dispatch] = useReducer(eventsReducer, initialState);

  async function addEventHandler(event: EventData) {
    try {
      const response = await fetch('/api/events', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(event),
      });

      if (!response.ok) {
        throw new Error('Failed to add event');
      }

      const addedEvent = await response.json();
      dispatch({ type: 'ADD_EVENT', payload: addedEvent });
    } catch (error) {
      console.error(error);
    }
  }

  useEffect(() => {
    async function fetchEvents() {
      try {
        const response = await fetch('/api/events');
        const data = await response.json();

        dispatch({ type: 'LOAD_EVENTS', payload: data });
      } catch (error) {
        console.error(error);
      }
    }

    fetchEvents();
  }, []);

  const ctx: EventsContextValue = {
    events: eventsState.events,
    isUpdatingEvent: eventsState.isUpdatingEvent,
    updatingEvent: eventsState.updatingEvent,
    addEvent: addEventHandler,
    deleteEvent(_id) {
      dispatch({ type: 'DELETE_EVENT', payload: _id });
    },
    updateEventSubmit(event) {
      dispatch({ type: 'UPDATE_EVENT', payload: event });
    },
    setUpdatingEvent(event) {
      dispatch({ type: 'SET_UPDATING_EVENT', payload: event });
    },
    setIsUpdating(status) {
      dispatch({ type: 'SET_IS_UPDATING', payload: status });
    },
  };

  return (
    <EventsContext.Provider value={ctx}>{children}</EventsContext.Provider>
  );
}
